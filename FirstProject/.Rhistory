}
hist(res, 100, freq=FALSE)
res
hist(res, 100, freq=FALSE)
quantile(res, 0.05)
quantile(res, 0.95)
x=rexp(10000, 1)
x
x
plot(x)
x.res = resid(x)
x=rexp(10000, 1)
y=rexp(10000, 1)
PA=data.fram(X,Y)
PA=data.frame(X,Y)
PA=data.frame(x,y)
pa.lm=lm(PA$x~PA$y)
plot(PA$x,PA$y)
plot(resid(pa.lm))
plot(predict(pa.lm),resid(pa.lm))
pa.lm.res=resid(pa.lm)
hist(pa.lm.res, 10, freq=F)
hist(pa.lm.res, 1, freq=F)
hist(pa.lm.res, 0.01, freq=F)
hist(pa.lm.res, 0.1, freq=F)
hist(pa.lm.res, 1, freq=F)
pa.lm.res
x=rexp(10000, 0.25)
y=rexp(10000, 0.25)
PA=data.frame(x,y)
pa.lm=lm(PA$x~PA$y)
pa.lm.res=resid(pa.lm)
hist(pa.lm.res, 10, freq=F)
hist(pa.lm.res, 1, freq=F)
hist(pa.lm.res, 1000, freq=F)
hist(pa.lm.res, 100000, freq=F)
hist(pa.lm.res, 1000, freq=F)
lines(sort(pa.lm.res), dnorm(sort(pa.lm.res), mean(pa.lm.res), sd(pa.lm.res)), col="red")
library(MASS)
Auto<-Cars93[, -c(1,2,3,4,6,7,8,9,10,11,15,16,18,22,23,24,26,27)]
head(Auto)
str(Auto)
plot(Auto)
install.packages('corrplot')
library(corrplot)
corrplot(corr(Auto), square)
corrplot(corr(Auto), "square")
corrplot(cor(Auto), "square")
library(scatterplot3d)
install.packages('scatterplot3s')
install.packages('scatterplot3d')
ph.lm = lm(Price~Horsepower, data=Auto)
plot(Auto$Horsepower,Auto$Price)
abline(ph.lm)
summary(ph.lm)$r.squared
Auto.lm=lm(Price~., Data=Auto)
Auto.lm=lm(Price~., data=Auto)
summary(Auto.lm)
confint(Auto.lm, "EngineSize", level=.95)
confint(Auto.lm, level=.95)
Auto.lm.r=residuals(Auto.lm)
hist(Auto.lm.r, 20, freq=F)
lines(density(Auto.lm.r),col="red")
m=mean(Auto.lm.r)
s=sd(Auto.lm.r)
lines(sort(Auto.lm.r),dnorm(sort(Auto.lm.r),m,s))
library(Auto93)
library(MASS)
Auto <- Cars93[,-c(1,2,3,4,6,7,8,9,10,11,15,16,18,22,23,24,26,27)]
summary(Auto)
scaled.Auto <- scale(Auto)
head(Auto)
head(scaled.Auto)
r = c()
head(longley)
ll1 = lm(Employed~GNP.deflator+GNP+Unemployed+Armed.Forces+Population+Year, data=longley)
summary(ll1)
ll1$r.squared
summary(ll1)$r.squared
r=matrix(ncol=2, nrow=3)
r[1,]=c(summary(ll1)$r.squared, summary(ll1)$adj.r.squared)
r
ll2=lm(Employed~GNP.deflator+GNP+Unemployed+Armed.Forces+Population+Year, data=longley)
r[2,]=c(summary(ll2)$r.squared, summary(ll2)$adj.r.squared)
r
ll3=lm(Employed~GNP+Unemployed+Armed.Forces+Population+Year, data=longley)
r[3,]=c(summary(ll3)$r.squared, summary(ll3)$adj.r.squared)
plot(r)
plot(r, seq(1,3))
plot(r, seq(1,4))
plot(r, seq(0,3))
plot(seq(0,3))
plot(r)
r
plot(r[,1])
plot(r[,1]-mean(r[,1]))
# importazione librerie da utilizzare
library(corrplot)
library(scatterplot3d)
# importazione librerie da utilizzare
library(corrplot)
# pulizia RStudio
cat("\014")
#library(scatterplot3d)
#library(scatterplot3d)
rm(list = ls())
library(scatterplot3d)
# importazione librerie da utilizzare
library(corrplot)
library(scatterplot3d)
# importazione librerie da utilizzare
library(corrplot)
library(scatterplot3d)
# pulizia RStudio
cat("\014")
rm(list = ls())
# importazione librerie da utilizzare
library(corrplot)
library(scatterplot3d)
# pulizia RStudio
cat("\014")
# importazione librerie da utilizzare
library(corrplot)
library(scatterplot3d)
# caricamento dei dati dal file csv
data = read.csv('tabella.csv', header = TRUE, sep = ";")
wd()
getwd()
setwd("C:\Users\Edoardo\Projects\Statistics")
setwd("C:/Users/Edoardo/Projects/Statistics")
getwd()
# caricamento dei dati dal file csvs
data = read.csv('tabella.csv', header = TRUE, sep = ";")
# importazione librerie da utilizzare
library(corrplot)
library(scatterplot3d)
# caricamento dei dati dal file csvs
data = read.csv('tabella.csv', header = TRUE, sep = ";")
getwd()
setwd("C:/Users/Edoardo/Projects/Statistics/FirstProject")
# caricamento dei dati dal file csvs
data = read.csv('tabella.csv', header = TRUE, sep = ";")
head(data)
data
data$nome_colonna <- NULL
# notiamo che ci sono un numero non indifferente di NA in alcune colonne,
# eliminiamo tali colonne
data$Accelerator.Co.Processor.Cores <- NULL
getwd()
setwd("C:/Users/Edoardo/Projects/Statistics/FirstProject")
getwd()
# pulizia console
cat("\014")
# importazione librerie da utilizzare
library(corrplot)
library(scatterplot3d)
# caricamento dei dati dal file csvs
data = read.csv('tabella.csv', header = TRUE, sep = ";")
# caricamento dei dati dal file csvs
data = read.csv('nba_complete_team_statistics', header = TRUE, sep = ";")
# caricamento dei dati dal file csvs
data = read.csv('nba_complete_team_statistics.csv', header = TRUE, sep = ";")
View(data)
View(data)
# rimozione colonne nominali
data$SEASON <- NULL
data$TEAM_NAME <- NULL
# rimozione colonne non selezionate
data$GP <- NULL
data$L <- NULL
data$W_PCT <- NULL
data$MIN <- NULL
data$FGM <- NULL
data$FG_PCT <- NULL
data$FG3M <- NULL
data$FG3_PCT <- NULL
data$FTM <- NULL
data$FT_PCT <- NULL
data$OREB <- NULL
data$DREB <- NULL
data$BLKA <- NULL
# rimozione colonne non selezionate
data$GP <- NULL
data$L <- NULL
data$W_PCT <- NULL
data$MIN <- NULL
data$FGM <- NULL
data$FG_PCT <- NULL
data$FG3M <- NULL
data$FG3_PCT <- NULL
data$FTM <- NULL
data$FT_PCT <- NULL
data$OREB <- NULL
data$DREB <- NULL
data$BLKA <- NULL
data$PF <- NULL
data$PFD <- NULL
data$PLUS_MINUS <- NULL
data$AST_PCT <- NULL
data$OREB_PCT <- NULL
data$DREB_PCT <- NULL
data$REB_PCT <- NULL
data$TM_TOV_PCT <- NULL
data$EFG_PCT <- NULL
data$PACE <- NULL
data$POSS <- NULL
# recap data
summary(data)
str(data)
plot(data)
# rimozione colonne non selezionate
data$GP <- NULL
data$L <- NULL
data$W_PCT <- NULL
data$MIN <- NULL
data$FGM <- NULL
data$FG_PCT <- NULL
data$FG3M <- NULL
data$FG3_PCT <- NULL
data$FTM <- NULL
data$FT_PCT <- NULL
data$OREB <- NULL
data$DREB <- NULL
data$BLKA <- NULL
data$PF <- NULL
data$PFD <- NULL
data$PLUS_MINUS <- NULL
data$AST_PCT <- NULL
data$AST_TO <- NULL
data$AST_RATIO <- NULL
data$OREB_PCT <- NULL
data$DREB_PCT <- NULL
data$REB_PCT <- NULL
data$TM_TOV_PCT <- NULL
data$EFG_PCT <- NULL
data$TS_PCT <- NULL
data$PACE <- NULL
data$POSS <- NULL
data$PIE <- NULL
# recap data
summary(data)
str(data)
plot(data)
# recap data
summary(data)
str(data)
plot(data, pch=".")
str(data)
plot(data, pch=".")
getwd()
setwd("C:/Users/Edoardo/Projects/Statistics/FirstProject")
plot(data, pch=".")
corrplot(cor(data), "square")
# importazione librerie da utilizzare
library(corrplot)
corrplot(cor(data), "square")
getwd()
setwd("C:/Users/Edoardo/Projects/Statistics/FirstProject")
setwd("C:/Users/Edoardo/Projects/Statistics/FirstProject")
getwd()
setwd("C:/Users/Edoardo/Projects/Statistics/FirstProject")
getwd()
getwd()
# recap data
summary(data)
str(data)
plot(data, pch=".")
# standardizzazione tabella
st_data = data.frame(scale(data))
# visualizzazione tabella standardizzata
# la standardizzazione non varia il grafico di dispersione
# e non ? stata quindi considerata nel seguito dell'analisi
plot(st_data)
corrplot(cor(data), method = "number")
corrplot(cor(data), "square")
library(corrplot)
corrplot(cor(data), "square")
corrplot(cor(data), "square")
corrplot(cor(data),
lower = "number",
upper = "ellipse")
corrplot.mixed(cor(data),
lower = "number",
upper = "ellipse")
warnings()
corrplot.mixed(cor(data),
lower = "number",
upper = "ellipse",
tl.pos = "lt")
summary(st_data)
summary(data)
# grafico correlazioni
corrplot.mixed(cor(data),
lower = "number",
upper = "ellipse",
number.cex=0.75,
tl.pos = "lt")
# grafico correlazioni
corrplot.mixed(cor(data),
lower = "number",
upper = "ellipse",
number.cex=0.70,
tl.pos = "lt")
# grafico correlazioni
corrplot.mixed(cor(data),
lower = "number",
upper = "ellipse",
number.cex=0.70,
tl.pos = "lt",
tl.cex=0.70)
# grafico correlazioni
corrplot.mixed(cor(data),
lower = "number",
upper = "ellipse",
number.cex=0.70,
tl.pos = "lt",
tl.cex=0.70)
dev.off()
# Initialize file path
file_path= "./img/Correlation matrix.png"
png(height=1800, width=1800, file=file_path, type = "cairo")
corrplot.mixed(cor(data),
lower = "number",
upper = "ellipse",
number.cex=0.70,
tl.pos = "lt",
tl.cex=0.70)
dev.off()
# Initialize file path
file_path= "./imgs/Correlation matrix.png"
png(height=1800, width=1800, file=file_path, type = "cairo")
corrplot.mixed(cor(data),
lower = "number",
upper = "ellipse",
number.cex=0.70,
tl.pos = "lt",
tl.cex=0.70)
dev.off()
# costruzione modello di regressione lineare
r = matrix(ncol = 2, nrow = 4)
data.lm1=lm(WIN~., data=data)
data.lm1=lm(W~., data=data)
summary(lm1)
lm.1=lm(W~., data=data)
summary(lm.1)
lm.2=lm(W~.-NET_RATING, data=data)
summary(lm.2)
lm.3=lm(W~.-NET_RATING-FTA, data=data)
summary(lm.3)
lm.4=lm(W~.-NET_RATING-FTA-STL, data=data)
summary(lm.4)
lm.5=lm(W~.-NET_RATING-FTA-STL-BLK, data=data)
summary(lm.5)
lm.6=lm(W~.-NET_RATING-FTA-STL-BLK-TOV, data=data)
summary(lm.6)
# esaminiamo i valori degli R^2 e R^2 corretti
ymin = min(r)
ymax = max(r)
r_squared <- expression(R^2)
r_squared_adj <- expression(R^2 ~ Corretto)
xl <- expression(R^2 ~ e ~ R^2 ~ Corretto ~ dei ~ 4 ~ Modelli ~ di ~ Regressione ~ Lineare ~ Valutati)
plot(r[,1], pch = 19, type = "b", col = "red", xaxt="n", ylab = "", ylim = c(ymin,ymax), xlab = xl, cex = 1.5, cex.axis = 1.5, cex.lab = 1.5)
axis(1 , at = 0:4, labels = 0:4)
lines(r[,2], pch = 19, type = "b", col = "blue")
legend(3.53, 0.9696, legend=c(r_squared, r_squared_adj), col=c("red", "blue"), lty=1:1)
# esaminiamo i valori degli R^2 e R^2 corretti
ymin = min(r)
# costruzione modello di regressione lineare
r = matrix(ncol = 2, nrow = 4)
lm.1=lm(W~., data=data)
summary(lm.1)
r[1,]= c(summary(lm.1)$r.squared, summary(lm.1)$adj.r.squared)
lm.2=lm(W~.-NET_RATING, data=data)
summary(lm.2)
r[2,]= c(summary(lm.2)$r.squared, summary(lm.2)$adj.r.squared)
lm.3=lm(W~.-NET_RATING-FTA, data=data)
summary(lm.3)
r[3,]= c(summary(lm.3)$r.squared, summary(lm.3)$adj.r.squared)
lm.4=lm(W~.-NET_RATING-FTA-STL, data=data)
# costruzione modello di regressione lineare
r = matrix(ncol = 2, nrow = 6)
lm.1=lm(W~., data=data)
source("C:/Users/Edoardo/Projects/Statistics/FirstProject/script.r")
corrplot.mixed(cor(data),
lower = "number",
upper = "ellipse",
number.cex=0.70,
tl.pos = "lt",
tl.cex=0.70)
summary(trees)
head(trees)
str(trees)
# costruzione modello di regressione lineare
r = matrix(ncol = 2, nrow = 6)
lm.1=lm(W~., data=data)
summary(lm.1)
r[1,]= c(summary(lm.1)$r.squared, summary(lm.1)$adj.r.squared)
lm.2=lm(W~.-NET_RATING, data=data)
summary(lm.2)
r[2,]= c(summary(lm.2)$r.squared, summary(lm.2)$adj.r.squared)
lm.3=lm(W~.-NET_RATING-FTA, data=data)
summary(lm.3)
r[3,]= c(summary(lm.3)$r.squared, summary(lm.3)$adj.r.squared)
lm.4=lm(W~.-NET_RATING-FTA-STL, data=data)
summary(lm.4)
r[4,]= c(summary(lm.4)$r.squared, summary(lm.4)$adj.r.squared)
lm.5=lm(W~.-NET_RATING-FTA-STL-BLK, data=data)
summary(lm.5)
r[5,]= c(summary(lm.5)$r.squared, summary(lm.5)$adj.r.squared)
lm.6=lm(W~.-NET_RATING-FTA-STL-BLK-AST, data=data)
summary(lm.6)
lm.7=lm(W~.-NET_RATING-FTA-STL-BLK-AST-REB, data=data)
summary(lm.7)
### Sono tutti p value bassi, provo comunque a eliminare i più alti
lm.8=lm(W~.-NET_RATING-FTA-STL-BLK-AST-REB-FG3A, data=data)
summary(lm.8)
lm.9=lm(W~.-NET_RATING-FTA-STL-BLK-AST-REB-FG3A-PTS, data=data)
summary(lm.9)
lm.10=lm(W~.-NET_RATING-FTA-STL-BLK-AST-REB-FG3A-PTS-TOV, data=data)
summary(lm.10)
# esaminiamo i valori degli R^2 e R^2 corretti
ymin = min(r)
ymax = max(r)
r_squared <- expression(R^2)
source("C:/Users/Edoardo/Projects/Statistics/FirstProject/script.r", encoding = 'UTF-8')
# esaminiamo i valori degli R^2 e R^2 corretti
ymin = min(r)
ymax = max(r)
r_squared <- expression(R^2)
r_squared_adj <- expression(R^2 ~ Corretto)
xl <- expression(R^2 ~ e ~ R^2 ~ Corretto ~ dei ~ 10 ~ Modelli ~ di ~ Regressione ~ Lineare ~ Valutati)
plot(r[,1], pch = 19, type = "b", col = "red", ylim = c(ymin,ymax))
lines(r[,2], pch = 19, type = "b", col = "blue")
lines(r[,2], pch = 19, type = "b", col = "blue")
lines(r[,2], pch = 19, type = "b", col = "blue")
lines(r[,2], pch = 19, type = "b", col = "blue")
# esaminiamo i valori degli R^2 e R^2 corretti
ymin = min(r)
ymax = max(r)
r_squared <- expression(R^2)
r_squared_adj <- expression(R^2 ~ Corretto)
xl <- expression(R^2 ~ e ~ R^2 ~ Corretto ~ dei ~ 10 ~ Modelli ~ di ~ Regressione ~ Lineare ~ Valutati)
plot(r[,1], pch = 19, type = "b", col = "red", ylim = c(ymin,ymax))
axis(1 , at = 0:10, labels = 0:4)
lines(r[,2], pch = 19, type = "b", col = "blue")
legend(3.53, 0.9696, legend=c(r_squared, r_squared_adj), col=c("red", "blue"), lty=1:1)
# esaminiamo i valori degli R^2 e R^2 corretti
ymin = min(r)
ymax = max(r)
r_squared <- expression(R^2)
r_squared_adj <- expression(R^2 ~ Corretto)
xl <- expression(R^2 ~ e ~ R^2 ~ Corretto ~ dei ~ 10 ~ Modelli ~ di ~ Regressione ~ Lineare ~ Valutati)
plot(r[,1], pch = 19, type = "b", col = "red", ylim = c(ymin,ymax), xlab=xl)
axis(1 , at = 0:10, labels = 0:10)
lines(r[,2], pch = 19, type = "b", col = "blue")
# esaminiamo i valori degli R^2 e R^2 corretti
ymin = min(r)
ymax = max(r)
xl <- expression(R^2 ~ e ~ R^2 ~ Corretto ~ dei ~ 10 ~ Modelli ~ di ~ Regressione ~ Lineare)
plot(r[,1], pch = 19, type = "b", col = "red", ylim = c(ymin,ymax), xlab=xl)
axis(1 , at = 0:10, labels = 0:10)
lines(r[,2], pch = 19, type = "b", col = "blue")
legend(3.53, 0.9696, legend=c(r_squared, r_squared_adj), col=c("red", "blue"), lty=1:1)
# esaminiamo i valori degli R^2 e R^2 corretti
ymin = min(r)
ymax = max(r)
xl <- expression(R^2 ~ e ~ R^2 ~ Corretto ~ dei ~ 10 ~ Modelli ~ di ~ Regressione ~ Lineare)
plot(r[,1], pch = 19, type = "b", col = "red", ylim = c(ymin,ymax), xlab=xl)
axis(1 , at = 0:10, labels = 0:10)
lines(r[,2], pch = 19, type = "b", col = "blue")
# esaminiamo i valori degli R^2 e R^2 corretti
ymin = min(r)
ymax = max(r)
xl <- expression(R^2 ~ e ~ R^2 ~ Corretto ~ dei ~ 10 ~ Modelli ~ di ~ Regressione ~ Lineare)
plot(r[,1], pch = 19, type = "b", col = "red", ylim = c(ymin,ymax), xlab=xl, xaxt="n", ylab = "")
axis(1 , at = 0:10, labels = 0:10)
lines(r[,2], pch = 19, type = "b", col = "blue")
axis(1 , at = 0:10)
# esaminiamo i valori degli R^2 e R^2 corretti
ymin = min(r)
ymax = max(r)
xl <- expression(R^2 ~ e ~ R^2 ~ Corretto ~ dei ~ 10 ~ Modelli ~ di ~ Regressione ~ Lineare)
plot(r[,1], pch = 19, type = "b", col = "red", ylim = c(ymin,ymax), xlab=xl, ylab = "")
axis(1 , at = 0:10)
lines(r[,2], pch = 19, type = "b", col = "blue")
legend(3.53, 0.9696, legend=c(r_squared, r_squared_adj), col=c("red", "blue"), lty=1:1)
# esaminiamo i valori degli R^2 e R^2 corretti
ymin = min(r)
ymax = max(r)
xl <- expression(R^2 ~ e ~ R^2 ~ Corretto ~ dei ~ 10 ~ Modelli ~ di ~ Regressione ~ Lineare)
plot(r[,1], pch = 19, type = "b", col = "red", ylim = c(ymin,ymax), xlab=xl, ylab = "")
axis(1 , at = 0:10)
lines(r[,2], pch = 19, type = "b", col = "blue")
legend(legend=c(r_squared, r_squared_adj), col=c("red", "blue"), lty=1:1)
# modello di regressione lineare scelto
lm = lm.10
summary(lm)
# scatterplot 3d del modello di regressione lineare
s3d<-scatterplot3d(data$FGA, data$OFF_RATING , data$DEF_RATING , main="Scatterplot 3D Modello di Regressione Lineare", pch=16, highlight.3d=TRUE, type="p", grid = T, xlab = "FGA", ylab = "OFF_RATING", zlab = "DEF_RATING")
s3d$plane3d(lm, draw_lines = F, draw_polygon = F)
# analisi dei residui
lm.r=residuals(lm)
plot(fitted(lm),lm.r)
# analisi dei residui
lm.r=residuals(lm)
plot(fitted(lm),lm.r, pch=".")
par(mfrow=c(1, 2))
hist(lm.resid, 100, freq = FALSE)
par(mfrow=c(1, 2))
hist(lm.r, 100, freq = FALSE)
lines(sort(lm.r), dnorm(sort(lm.r), mean(lm.r), sd(lm.r)), col="red", lwd=2)
qqnorm(lm.resid)
